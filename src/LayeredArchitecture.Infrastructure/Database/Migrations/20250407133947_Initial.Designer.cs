// <auto-generated />
using System;
using LayeredArchitecture.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LayeredArchitecture.Infrastructure.Database.Migrations
{
    [DbContext(typeof(LayeredArchitectureDbContext))]
    [Migration("20250407133947_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LayeredArchitecture.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quota")
                        .HasColumnType("integer");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("PlannedCourses");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("plannedCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("plannedCourseId");

                    b.ToTable("plannedCourseSessions");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSessionDiscontinuity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlannedCourseSessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlannedCourseSessionId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("discontinuity")
                        .HasColumnType("boolean");

                    b.Property<decimal>("price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlannedCourseSessionId");

                    b.HasIndex("PlannedCourseSessionId1");

                    b.HasIndex("StudentId", "PlannedCourseSessionId")
                        .IsUnique();

                    b.ToTable("plannedCourseSessionDiscontinuities");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("nameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("parentNameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("parentPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("students");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.StudentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("studentPayments");
                });

            modelBuilder.Entity("StudentStudentPayment", b =>
                {
                    b.Property<Guid>("studentPaymentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("studentsId")
                        .HasColumnType("uuid");

                    b.HasKey("studentPaymentsId", "studentsId");

                    b.HasIndex("studentsId");

                    b.ToTable("StudentStudentPayment");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourse", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.Course", "Course")
                        .WithMany("PlannedCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSession", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.PlannedCourse", "plannedCourse")
                        .WithMany("plannedCourseSessions")
                        .HasForeignKey("plannedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plannedCourse");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSessionDiscontinuity", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.PlannedCourseSession", "plannedCourseSession")
                        .WithMany()
                        .HasForeignKey("PlannedCourseSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LayeredArchitecture.Domain.PlannedCourseSession", null)
                        .WithMany("plannedCourseSessionDiscontinuities")
                        .HasForeignKey("PlannedCourseSessionId1")
                        .HasConstraintName("FK_plannedCourseSessionDiscontinuities_plannedCourseSessions_~1");

                    b.HasOne("LayeredArchitecture.Domain.Student", "student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plannedCourseSession");

                    b.Navigation("student");
                });

            modelBuilder.Entity("StudentStudentPayment", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.StudentPayment", null)
                        .WithMany()
                        .HasForeignKey("studentPaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LayeredArchitecture.Domain.Student", null)
                        .WithMany()
                        .HasForeignKey("studentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.Course", b =>
                {
                    b.Navigation("PlannedCourses");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourse", b =>
                {
                    b.Navigation("plannedCourseSessions");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSession", b =>
                {
                    b.Navigation("plannedCourseSessionDiscontinuities");
                });
#pragma warning restore 612, 618
        }
    }
}
