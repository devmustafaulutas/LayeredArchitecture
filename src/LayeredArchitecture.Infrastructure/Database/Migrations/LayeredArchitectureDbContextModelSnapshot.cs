// <auto-generated />
using System;
using LayeredArchitecture.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LayeredArchitecture.Infrastructure.Database.Migrations
{
    [DbContext(typeof(LayeredArchitectureDbContext))]
    partial class LayeredArchitectureDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LayeredArchitecture.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quota")
                        .HasColumnType("integer");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("PlannedCourses");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<Guid>("plannedCourseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("plannedCourseId");

                    b.ToTable("PlannedCourseSessions");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSessionDiscontinuity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlannedCourseSessionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("discontinuity")
                        .HasColumnType("boolean");

                    b.Property<Guid>("plannedCourseStudentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PlannedCourseSessionId");

                    b.HasIndex("plannedCourseStudentId");

                    b.ToTable("PlannedCourseSessionDiscontinuities");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlannedCourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("plannedCourseSessionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("studentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlannedCourseId");

                    b.HasIndex("plannedCourseSessionId");

                    b.HasIndex("studentId");

                    b.ToTable("PlannedCourseStudents");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentPaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("nameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("parentNameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("parentPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("StudentPaymentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.StudentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPayments");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourse", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.Course", "Course")
                        .WithMany("PlannedCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSession", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.PlannedCourse", "plannedCourse")
                        .WithMany("plannedCourseSessions")
                        .HasForeignKey("plannedCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plannedCourse");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSessionDiscontinuity", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.PlannedCourseSession", "plannedCourseSession")
                        .WithMany("plannedCourseSessionDiscontinuities")
                        .HasForeignKey("PlannedCourseSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LayeredArchitecture.Domain.PlannedCourseStudent", "plannedCourseStudent")
                        .WithMany()
                        .HasForeignKey("plannedCourseStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plannedCourseSession");

                    b.Navigation("plannedCourseStudent");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseStudent", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.PlannedCourse", null)
                        .WithMany("plannedCourseStudents")
                        .HasForeignKey("PlannedCourseId");

                    b.HasOne("LayeredArchitecture.Domain.PlannedCourseSession", "plannedCourseSession")
                        .WithMany("plannedCourseStudents")
                        .HasForeignKey("plannedCourseSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LayeredArchitecture.Domain.Student", "student")
                        .WithMany("plannedCourseStudents")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("plannedCourseSession");

                    b.Navigation("student");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.Student", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.StudentPayment", null)
                        .WithMany("students")
                        .HasForeignKey("StudentPaymentId");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.StudentPayment", b =>
                {
                    b.HasOne("LayeredArchitecture.Domain.Student", "student")
                        .WithMany("studentPayments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("student");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.Course", b =>
                {
                    b.Navigation("PlannedCourses");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourse", b =>
                {
                    b.Navigation("plannedCourseSessions");

                    b.Navigation("plannedCourseStudents");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.PlannedCourseSession", b =>
                {
                    b.Navigation("plannedCourseSessionDiscontinuities");

                    b.Navigation("plannedCourseStudents");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.Student", b =>
                {
                    b.Navigation("plannedCourseStudents");

                    b.Navigation("studentPayments");
                });

            modelBuilder.Entity("LayeredArchitecture.Domain.StudentPayment", b =>
                {
                    b.Navigation("students");
                });
#pragma warning restore 612, 618
        }
    }
}
